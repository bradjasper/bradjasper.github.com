<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Brad Jasper, Raleigh Full-stack Software Developer]]></title>
  <link href="http://bradjasper.com/atom.xml" rel="self"/>
  <link href="http://bradjasper.com/"/>
  <updated>2014-07-10T15:04:48-04:00</updated>
  <id>http://bradjasper.com/</id>
  <author>
    <name><![CDATA[Brad Jasper]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Rise of Interactive Animation in UI Design]]></title>
    <link href="http://bradjasper.com/blog/the-rise-of-interactive-animation-in-ui-design/"/>
    <updated>2014-05-18T16:36:00-04:00</updated>
    <id>http://bradjasper.com/blog/the-rise-of-interactive-animation-in-ui-design</id>
    <content type="html"><![CDATA[<p><em>Touch-based computing has revolutionized the way we interact with computers; interactive animation has been and will continue to be a huge part of that.</em></p>

<h3>The Basic Principles of Animation</h3>

<p>In the 1930's the ‘old men’ of Walt Disney Studios developed the 12 basic principles of animation.</p>

<p>[ WATCH THIS VIDEO IF YOU HAVEN'T SEEN IT ]</p>

<p>[ examples ]</p>

<p>These tricks brought static characters to life! They made animations fun and engaging made the story that was being told more rich.</p>

<p>Think of the original Pixar lamp introduction. Why was it compelling? Why did it have “charm” (one of their 12 basic principles).</p>

<p>[ show animation ]</p>

<p>User interface design is going through a similar transition right now—turning previous static and "boring" interfaces into "live" interfaces that "feel" good.</p>

<p>For decades, user interfaces have been relatively static and separated by a level of indirection (mouse or keyboard). Of course you could scroll webpages and windows previously, but the experience wasn’t the same. MSPaint was fun, but Paper is a much more engaging experience (many people have anecdotes on how natural it is for a small child to use an iPad, older generations as well).</p>

<p>It turns out removing that level of indirection (the mouse) is huge. Now you’re not interacting with a computer, you’re interacting with <em>your content</em>.</p>

<p>When Steve Jobs demoed the first UIScrollView—people gasped and applauded. [citation needed]</p>

<p>Interacting with your content was just a little more magical.</p>

<p>Suddenly things like gestures became very important, and animations fell out as a natural way to provide smooth transitions between states.</p>

<p>For example, when you flicked a UIScrollView it would scroll faster or slower depending on how hard you flicked.</p>

<p>The magic here is they’ve connected the velocity of the gesture to the velocity of the animation—so it’s a fluid transition from one to the other. Everything feels perfect. The object decays over time and comes to a nice rest just as it would if you threw a ball outside.</p>

<p>Another example is pinching an image—you just do what you would naturally think to do and it works. It feels like your hands are actually manipulating the image. When the magic is working it’s because they are.</p>

<p>So what’s the problem?</p>

<p>As important as these types of gestural interfaces are, they have still been kind of hard to build well. Even though the UIScrollView example has been around for a while—re-creating interfaces that feel “alive” is something that’s usually sprinkled in for certain important interactions.</p>

<p>Consider the image viewer on iOS 7. When you minimize a picture, there's a delay between when you can pick one back up. So sometimes taps get missed.</p>

<p>Why is such a tiny detail important? A lot of animations actually take longer to complete than what it visually looks like. So on an ease-in-out transition, as the transition gets closer to the edge it gets slower to give it the effect of slowing down. If a user mis-times a touch even by a millisecond, the touch is dismissed.</p>

<p>This ever so slightly breaks the immersion.</p>

<hr />

<p>One big difference between animation for cartoons and animation for user interfaces, is the user interface is being controlled by the user. So the user interface always has to be able to react. The user controlling and the interface animating have to be 1:1 otherwise the immersion is broken.</p>

<p>This has been a big part of what's missing from modern day app development.</p>

<p>Animations have been possible, but they're either fire &amp; forget or pretty difficult to build.</p>

<p>One area of computing that's encountered this problem a lot is gaming, of course. Games want to follow all the animation principles while also making the game intuitive from a interaction perspective. If you can't move your character when you swing the sword, it's a bad experience because you can't react when the drag spits his fireball.</p>

<p>The user interface should always be available to manipulate, and the animations should always be a continuous extension of the control you're putting on them.</p>

<hr />

<p>Even the main UI animation in Path, which was widely lauded [citation needed], has a few small issues.</p>

<p>When you press the + button and then quickly press it again to cancel, it ignores your tap. When the menu is activated you can’t interact with the scroll content. When you swipe, the menu closes, but doesn’t scroll the content. </p>

<p>^ Maybe there’s good reasons for this such as they don’t want users pressing scroll items when the menu is open. But they could still initiate the scroll as the menu is closing, and by connecting it with the fingers velocity, everything would feel fine.</p>

<hr />

<p>Most of these animations have been fire &amp; forget [citation needed]. Which means the user can’t interrupt them.</p>

<p>Which means most of the app feels great, but those part break the experience. As if the Walt Disney animators couldn’t afford to make their entire movie adhere to the 12 basic principles of animation so they just left certain characters “dead” rather than making smaller &amp; less complex movies [citation needed—did they do this?]</p>

<p>So if the goal is to create an amazing user experience, immersion is a big part of that.</p>

<p>And when a user can’t stop an animation or it glitches or bounces in a way that doesn’t feel natural—it’s a tiny tiny detail, but breaks the immersion in the same way that an actor delivering a really cheesy line would pull you out of an otherwise great movie.</p>

<p>Most of the time it’s better to just remove the animation than do it poorly.</p>

<p>So what’s available to developers?</p>

<p>The good news is, lots.</p>

<p>Before iOS 7 there were lots of ways to do simple animations (UIView or Core Animation), but these “gestural-based animations” still suffered from problems (like what).</p>

<p>In iOS 7 Apple introduced UIKit dynamics which provides a whole new layer of tools to use just for this purpose—to create interfaces that feel real and a user can interact with.</p>

<p>As wonderful as UIKit dynamics is, it can still be tricky. It requires a shift in thinking away from the very simple Core Animation model. While it’s very powerful it can be difficult (for x, y &amp; z).</p>

<p>[ SHOW EXAMPLE OF UIKIT DYANMICS ]</p>

<p>Fortunately for UI developers &amp; designers everywhere, Facebook recently released POP, which is the animation engine they acquired from Push Pop Press (famous for their Al Gore book) and polished for their new app Paper (link).</p>

<p>What are POP’s main selling points?</p>

<ul>
<li>Same simple Core Animation API</li>
<li>New bounciness &amp; decay animation types that helps UI feel “alive” (also has custom)</li>
<li>Easily update animation while it’s running</li>
<li>Easily connect gesture velocity to provide fluid interactive animations</li>
<li>Easily combine multiple complex animations &amp; gestures into one (Paper image manipulation vs Apple)</li>
</ul>


<p>Key word? Easy. It’s really easy to do simple stuff that looks &amp; feel’s good &amp; it’s also pretty easy to do complex stuff that either wasn’t possible before or took tons of custom coding.</p>

<p>[ EXAMPLES OF PAPER ]</p>

<p>[ SHOW A LOT OF THE COMMON PROPERTIES YOU CAN ANIMATE. WITH GIFS ]</p>

<p>[ RE-CREATE UI SCROLL VIEW ]</p>

<p>[ EXAMPLES OF COOL STUFF OTHER PEOPLE ARE DOING / CODEPLEASE &amp; GEOMETRY ]</p>

<p>There are even new projects popping up (sorry) like MCAnimate which make simple animations literally 1 line of code.</p>

<p>It’s kind of incredible to be honest and I’ve been really excited about this since they launched.</p>

<p>If you haven’t already, watch this video Facebook did on POP:</p>

<p>[ INSERT VIDEO LINK ]</p>

<p>There’s some really fascinating stuff in there (like what. you took notes. pull some of it out)</p>

<p>[ WHAT ARE SOME MORE COMPLEX THINGS YOU CAN DO ]</p>

<ul>
<li><p>Animate any property (sound)</p></li>
<li><p>UIView animations</p></li>
<li>Core Animation</li>
<li>UIKit dynamics</li>
<li>Facebook POP</li>
</ul>


<h1>Examples</h1>

<ul>
<li>POP geometry
 — Follows 1-4 basic principles
 — When you pull from a corner it stretches that corner, when pull from center it doesn’t stretch so much</li>
</ul>


<p>There are a lot of amazing new possibilities and just like good animation can’t save a bad story, using gesture-based animations poorly or just because you can’t won’t result in a better user experience. But when used properly to ehance the experience and when done with proper care to make sure edge cases that “break the immersion” are handled well—the results can be pretty breathtaking.</p>

<ul>
<li>Over the next 5/10/15/20 years touch based computing is going to migrate more and more towards these gestural interfaces. Making them immersive in-part means making some of the transitions animated &amp; "feel" like the real world.</li>
</ul>


<p>You can have a huge advantage if you start building your apps like this today given the tools at your disposal.</p>

<h1>Takeaways</h1>

<p>Now's an amazing time to be a UI developer or designer. Software is getting put more and more places and we get to design the interfaces for them.</p>

<p>Whether it's a watch, jawbone, oculus right, or iPhone application</p>

<ul>
<li><p>If you're a developer start thinking up new ways to build your old interface</p></li>
<li><p>if you're a designer you can get your hands dirty with Oragami. but oh, btw these animations really aren't hard to build in code! Might be worth downloading one of the existing playground apps and start tweaking!</p></li>
<li><p>This post is mostly about Apple and talks about UI as if other platforms don't exist (Android). This is mostly just because this is where my experience is (check out rebound)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case Study: Focus]]></title>
    <link href="http://bradjasper.com/blog/case-study-focus/"/>
    <updated>2014-02-08T14:48:00-05:00</updated>
    <id>http://bradjasper.com/blog/case-study-focus</id>
    <content type="html"><![CDATA[<p><a href="http://www.heyfocus.com">Focus</a> is a Mac productivity app that blocks distracting websites. This is a write-up of some of the decisions that went into building the product. If you're interested you can <a href="http://www.heyfocus.com">download Focus</a> or <a href="https://github.com/bradjasper/Focus">view the source code</a> on GitHub.</p>

<br>


<br>


<br>


<br>


<br>


<br>


<h3>The Idea</h3>

<p>Focus is a small Mac app that blocks distracting websites and services.</p>

<p>I built it because when I'm working, I don't want to be distracted. But computers are getting better and better at distracting and interrupting us.</p>

<p>Focus is an easy way to say "I'm working" and shut everything out.</p>

<div class="seperator"></div>


<h3>Evaluating the Market</h3>

<p>There were already a few existing products that block distracting websites (the least of which is /etc/hosts), but none them hit all of my goals:</p>

<ul>
<li>Simple, intuitive, stays out of your way</li>
<li>1-click toggle from the menu bar</li>
<li>Easily undo (not "forcing" productivity)</li>
<li>Works without browser restart (some have internal DNS caches)</li>
<li>Works on instant messenger services</li>
<li>Only requires admin password one time</li>
<li>Ability to show custom message on blocked website</li>
</ul>


<p>Since I didn't find any apps that satisfied my requirements, I decided to start building Focus.</p>

<p>For larger apps I would have spent more time validating the idea with customers. But since Focus was a small app that I personally wanted, I wasn't as worried about this.</p>

<div class="seperator"></div>


<h3>Building the Product</h3>

<p>Focus is a menu bar app.</p>

<p><figure>
<img src="/static/images/content/menubar-icon-states.png" alt="Focus menu bar icon states" />
<figcaption>Focus modes in the menu bar (top to bottom): off, on, on (grayscale)</figcaption>
</figure></p>

<p>It doesn't have any windows (besides it's preferences window).  This means I didn't have to write lots of UI or view code—rather most of the work on Focus was in the background.</p>

<p><figure class="shadow">
<img src="/static/images/content/preferences-window.png" alt="Focus preferences window" />
<figcaption>Preferences window</figcaption>
</figure></p>

<p><figure class="shadow">
<img src="/static/images/content/blocked-sites-window.png" alt="Focus blocked sites window" />
<figcaption>Blocked websites window</figcaption>
</figure></p>

<p>Here are some of the major pieces of Focus that work in the background.</p>

<br>


<h4>Privileged Helper Tool</h4>

<p>Under-the-hood, Focus requires an administrator password for many of the tasks it performs, but constantly entering your password is a bad experience.</p>

<p>There are a few ways to solve this, but the best I found was using a privileged helper tool, which gets installed the first time the app is run. The helper tool keeps the escalated privileges and can receive messages from Focus to do the tasks it needs without asking the user for their password over and over.</p>

<p><figure class="shadow">
<img src="/static/images/content/password-prompt.png" alt="Privileged Helper Tool installation" />
<figcaption>Example of helper tool being installed so password is only prompted once</figcaption>
</figure></p>

<p>Some other apps consider this password prompt a feature because it adds friction.</p>

<p>Focus doesn't take this approach. It's goal is to block interruptions and gently remind you when you get distracted—but not to force or annoy you.</p>

<p>If you want to get back to your blocked websites, you should be able to.</p>

<br>


<h4>Blocking and Intercepting Websites</h4>

<p>There are many ways to block and intercept websites, here's a few Focus explored:</p>

<br>


<p><strong>/etc/hosts</strong>:
The easiest way to block distracting websites is by using /etc/hosts, and this is what Focus originally used.</p>

<p>Unfortunately, some browsers have an internal cache and require a restart. This was painful enough to search for alternatives.</p>

<br>


<p><strong>IPFW/PF</strong>:
Mac OS X has built-in firewalls that can block IP's really well. They can even slow down traffic rather than block it directly, which is a great feature.</p>

<p>But managing the HOST -> IP conversion is a pain. Some hosts resolve to many IP addresses and resolving them can be slow.</p>

<p>Also, intercepting webpages and displaying custom content was harder than with other methods.</p>

<br>


<p><strong>DNS</strong>:
Setting up a custom DNS server that blocks host lookups is an option, but it also takes responsibility for the entire Internet connection, which is a big liability.</p>

<p>Plus, it is somewhat common for people to use custom DNS servers&mdash;so overal this wasn't the best option.</p>

<br>


<p><strong>Automatic Proxy Configuration</strong>:
The option Focus ended up using was called Automatic Proxy Configuration. Mac OS X has this built-in and is a way to configure proxies for certain sites dynamically—perfect!</p>

<p>This allowed Focus to intercept websites and display a custom message, without taking control of the entire network connection.</p>

<p>It relies on an Automatic Proxy Configuration file (PAC file), which is a file that contains a single Javascript function with instructions on routing.</p>

<p>This is what it looks like:</p>

<pre><code>function FindProxyForURL(url, host) {
    if (dnsDomainIs(host,'facebook.com')) return 'PROXY custom.proxy1.com:8080';
    if (dnsDomainIs(host,'twitter.com')) return 'PROXY custom.proxy2.com:8080';
    // ...
    return 'DIRECT';
}
</code></pre>

<br>


<br>


<p>This ended up being a great option for Focus and it satisfied all major goals.</p>

<div class="seperator"></div>


<h4>Serving a custom message instead of blocked website</h4>

<br>


<p>One unique feature of Focus is intercepting the blocked website and displaying a custom message (a motivational quote by default).</p>

<p><figure>
<img src="/static/images/content/reddit-blocked.png" alt="Focus block message" />
<figcaption>Example of Focus blocking a website</figcaption>
</figure></p>

<p>This is accomplished using the Automatic Proxy Configuration option described above with a custom proxy server that can intercept requests and block them.</p>

<p>But it turns out you don't actually need a full proxy server to accomplish this, rather just a regular simple HTTP server.</p>

<p>On HTTP requests you can return a custom response, which works as expected.</p>

<p>On HTTPS requests, browsers are confused by the invalid proxy response and display a broken webpage&mdash;which is a suitable compromise for Focus (the alternative is installing custom root ceritificates, which is really insecure).</p>

<div class="seperator"></div>


<h3>No Sandbox, No App Store</h3>

<br>


<p>One bad thing I learned early on into the development of Focus was that it couldn't be in the App Store.</p>

<p>It requires administrator privileges because it modifies system-level network settings. Unfortunately this means Focus can't stay in a sandbox, so it can't be in the App Store.</p>

<p>I decided to build it anyway, but expect this will have a pretty significant negative effect on sales.</p>

<div class="seperator"></div>


<h3>Unfinished Promotional Video</h3>

<br>


<p>I wanted to do something fun and creative to promote Focus and decided on making a stop-motion promotional video.</p>

<p>I'd never filmed a promo video before, so started making short test videos and iterating on early concepts to try to learn and improve.</p>

<p>The videos improved significantly, but ultimately I decided not to pursue the promo video after I learned Focus couldn't be in the App Store. The size of the video project was growing and it was hard to justify that with a smaller app.</p>

<p>The early videos were just testing concepts and were never supposed to be released, but here is the first one :)</p>

<iframe width="560" height="315" src="//www.youtube.com/embed/QY65UC4hYgI?rel=0" frameborder="0" allowfullscreen></iframe>




<div class="seperator"></div>


<h3>Conclusion</h3>

<p>Focus was a fun app to build and I learned a lot during the process. I'm really happy with how everything came together and think it solves the problem of blocking distracting websites well.</p>

<p>Focus seems like a very simple app and in many ways it is. There are, however, a lot of decisions that happened behind-the-scenes to make everything come together in an elegant way. This was an outline of some of those biggest decisions and the reasoning behind them&mdash;hope you found it useful!</p>

<p>If you're interested you can <a href="http://www.heyfocus.com">download Focus</a> or <a href="https://github.com/bradjasper/Focus">view the source code on GitHub</a>.</p>

<br>


<br>


<br>


<br>


<p><strong>Like this write-up?</strong> You can hire the developer behind it to work on your awesome project! My name is Brad and I'm a web &amp; mobile developer who loves building great products with interesting people.</p>

<p><a href="mailto:contact@bradjasper.com">Email me</a> to setup a time to talk about your project and see how I can help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Follow your favorite people on Hacker News]]></title>
    <link href="http://bradjasper.com/blog/follow-a-hacker-news-users-comments-with-rss/"/>
    <updated>2013-05-17T13:09:00-04:00</updated>
    <id>http://bradjasper.com/blog/follow-a-hacker-news-users-comments-with-rss</id>
    <content type="html"><![CDATA[<p>On Hacker News I have always wanted a way to stay up-to-date with people who make really insightful comments.</p>

<p>There's a lot of great stuff out there&mdash;but it's hard to keep up with it all. This is actually a perfect use-case for RSS: high-quality content that's not updated very frequently.</p>

<p>Unfortunately, Hacker News doesn't support RSS for comments out of the box.</p>

<p>So, with some help from the official <a href="https://www.hnsearch.com/api">Hacker News Search API</a> and <a href="http://pipes.yahoo.com/pipes/">Yahoo! Pipes</a>, I strung together an RSS feed that pulls in the latest comments from any user.</p>

<blockquote>
http://pipes.yahoo.com/pipes/pipe.run?_id=9c88dd117c9c12408e5f37e5a610ad4a&_render=rss&username=<strong>USERNAME</strong>
</blockquote>


<p>Replace <strong>USERNAME</strong> in the URL above with any valid Hacker News username, and you will receive an RSS feed of their 50 most recent comments.</p>

<p><em> Want these in your inbox instead? Try this <a href="https://ifttt.com/recipes/4447">IFTTT recipe</a>. Want all comment feeds merged into one? Try this <a href="http://pipes.yahoo.com/pipes/pipe.info?_id=35b9f23463805cb43e8f674256319b58">Yahoo! Pipes recipe</a>.</p>
]]></content>
  </entry>
  
</feed>
