#!/bin/bash

# compile_js_templates
#
# A BASH script that takes a list of templates, condenses them (removes newlines), 
# and dumps them in a Javascript compatible-file.
#
# Q) Why on earth do we need this?
# A) Multi-line strings in Javascript really suck. You either have to escape
#    them or come up with some other kind of madness like building them in arrays.
#
#    And we need multi-line strings to write sane templates. Most Javascript templates
#    can be safely stored in HTML, but the bookmarklet only gets 1 injection point, a
#    Javascript file.
#
#    CoffeeScript lovingly handles a lot of this mess for us, but since we're
#    restricted to vanilla-JS here, we need a more elegant solution.
#
#    This is that solution.
#
#    This script takes a list of HTML files, strips all the whitespaces, builds a
#    Javascript object referencing each template, and dumps it to stdout.
#
#    The output should be saved to a Javascript file that can be later bundled with
#    the rest of the bookmarklet.
#
#    This file generally isn't called as a standalone file, but as part of the Makefile
#
#    Surprisingly, this was the least yucky solution. :)

# Make sure at least 1 template file is passed
((!$#)) && echo "No template files supplied!" 1>&2 && exit 1

# Output warning not to manually modify the output
echo "// This file is automatically generated, do not modify"

# Output template container, keeping variable scope local
echo "var templates = {}";

# Loop through command line arguments (template files)
for filepath in "$@"
do
    # Grab filename & templatename from filepath
    filename=${filepath##*/}
    template_name=${filename%.*}

    # Escape single quotes and remove new lines. Jumping
    compressed_template=$(cat $filepath | sed -e "s/'/\\\'/g" -e ':a;N;$!ba;s/\n//g')

    # Dump compressed_template line to stdout as part of templates hash
    echo "templates['${template_name}'] = '"${compressed_template}"';"
done
