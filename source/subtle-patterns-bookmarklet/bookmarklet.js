// Generated by CoffeeScript 1.3.3
(function() {
  var SubtlePatternsOverlay, load_css, load_rss, load_script, load_subtle_patterns,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  load_script = function(url, callback) {
    "Load a script from a remote URL...with a callback when it's complete";

    var script;
    script = document.createElement("script");
    script.type = "text/javascript";
    if (script.readyState) {
      script.onreadystatechange = function() {
        if (script.readyState === "loaded" || script.readyState === "complete") {
          script.onreadystatechange = null;
          return callback();
        }
      };
    } else {
      script.onload = function() {
        return callback();
      };
    }
    script.src = url;
    return document.getElementsByTagName("head")[0].appendChild(script);
  };

  load_css = function(url) {
    "Load CSS from a remote URL";

    var style;
    style = document.createElement("link");
    style.setAttribute("rel", "stylesheet");
    style.setAttribute("type", "text/css");
    style.setAttribute("href", url);
    return document.getElementsByTagName("head")[0].appendChild(style);
  };

  load_rss = function(url, success) {
    "Leverage Google's AJAX API to turn an RSS feed into JSON";
    return $.ajax({
      url: document.location.protocol + '//ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=1000&callback=?&q=' + encodeURIComponent(url),
      dataType: 'json',
      success: function(data) {
        if (data.responseStatus === 200) {
          return success(data);
        } else {
          return alert("There was an error loading the RSS feed " + url);
        }
      }
    });
  };

  load_subtle_patterns = function(success) {
    "Load patterns from SubtlePatterns via RSS";
    return load_rss("http://feeds.feedburner.com/SubtlePatterns", function(data) {
      var content, download, entry, img, patterns, _i, _len, _ref;
      patterns = [];
      _ref = data.responseData.feed.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        content = $(entry.content.replace(" src=", " data-src="));
        console.log(content);
        img = content.find("img[data-src$='.png']").attr("data-src");
        download = content.find("a[href$='.zip']").attr("href");
        console.log(download);
        if (img && download) {
          patterns.push({
            img: img,
            download: download,
            title: entry.title,
            link: entry.link,
            description: entry.contentSnippet,
            categories: entry.categories.slice(1)
          });
        }
      }
      return success(patterns);
    });
  };

  SubtlePatternsOverlay = (function() {
    "This is the overlay the user see's and uses to control patterns. This could use\nKnockout or Angular, but since it's a bookmarklet we'll keep it light and old-school with jQuery";

    function SubtlePatternsOverlay(patterns) {
      this.patterns = patterns;
      this.category_patterns = __bind(this.category_patterns, this);

      this.update = __bind(this.update, this);

      this.curr = 0;
    }

    SubtlePatternsOverlay.prototype.setup = function() {
      "Handle initial setup outside of constructor";
      this.create();
      this.setup_categories();
      this.setup_events();
      return this.update();
    };

    SubtlePatternsOverlay.prototype.show = function() {
      return this.el.show();
    };

    SubtlePatternsOverlay.prototype.hide = function() {
      return this.el.hide();
    };

    SubtlePatternsOverlay.prototype.create = function() {
      "Create the overlay for the first time";
      this.el = $("<div id=\"subtle_overlay\">\n    <span class=\"title\">\n        <a href=\"#\" target=\"_blank\" class=\"name\"></a>\n        <a title=\"Download this pattern\" href=\"#\" target=\"_blank\" class=\"download\">(download)</a>\n    </span>\n    <div class=\"controls\">\n        <a href=\"#\" class=\"previous\">&#x25C0;</a>\n        <span class=\"counter\">\n            <span class=\"curr\"></span>/<span class=\"total\"></span>\n        </span>\n        <a href=\"#\" class=\"next\">&#x25B6;</a>\n    </div>\n    <select class=\"category\">\n        <option value=\"all\">All (" + this.patterns.length + ")</option>\n    </select>\n    <div class=\"about\">\n        <a href=\"http://subtlepatterns.com\" target=\"_blank\">SubtlePatterns</a> bookmarklet by\n        <a href=\"http://bradjasper.com\" target=\"_blank\">Brad Jasper</a>\n    </div>\n</div>");
      return this.el.hide().appendTo("body").slideDown();
    };

    SubtlePatternsOverlay.prototype.current_pattern = function() {
      "Return the currently selected pattern";
      return this.category_patterns()[this.curr];
    };

    SubtlePatternsOverlay.prototype.update = function() {
      "Update the currently selected pattern. This is generally called on first\ninitialization and any time a next() or previous() call is made.";

      var pattern;
      pattern = this.current_pattern();
      $("body").css("background-image", "url('" + pattern.img + "')");
      $("body").css("background-repeat", "repeat");
      this.el.find(".curr").html("" + (this.curr + 1));
      this.el.find(".total").html("" + (this.category_patterns().length));
      this.el.find(".title .name").attr("href", pattern.link).attr("title", pattern.description).html(pattern.title);
      return this.el.find(".title .download").attr("href", pattern.download);
    };

    SubtlePatternsOverlay.prototype.category_patterns = function() {
      "Return all of the patterns for the active category";

      var pattern, _i, _len, _ref, _ref1, _results;
      _ref = this.patterns;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pattern = _ref[_i];
        if (this.category === "all" || (_ref1 = this.category, __indexOf.call(pattern.categories, _ref1) >= 0)) {
          _results.push(pattern);
        }
      }
      return _results;
    };

    SubtlePatternsOverlay.prototype.setup_categories = function() {
      "Build the category <select> box";

      var category, count, key, pattern, select, sortable, val, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      this.categories = {};
      this.category = "all";
      _ref = this.patterns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pattern = _ref[_i];
        _ref1 = pattern.categories;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          category = _ref1[_j];
          if (category in this.categories) {
            this.categories[category] += 1;
          } else {
            this.categories[category] = 1;
          }
        }
      }
      sortable = (function() {
        var _ref2, _results;
        _ref2 = this.categories;
        _results = [];
        for (key in _ref2) {
          val = _ref2[key];
          _results.push([key, val]);
        }
        return _results;
      }).call(this);
      sortable.sort(function(b, a) {
        return a[1] - b[1];
      });
      select = this.el.find("select");
      _results = [];
      for (_k = 0, _len2 = sortable.length; _k < _len2; _k++) {
        _ref2 = sortable[_k], category = _ref2[0], count = _ref2[1];
        _results.push(select.append("<option value='" + category + "'>" + category + " (" + count + ")</option>"));
      }
      return _results;
    };

    SubtlePatternsOverlay.prototype.setup_events = function() {
      "Setup event handlers for all different actions";

      var _this = this;
      $(document).keydown(function(e) {
        switch (e.keyCode) {
          case 37:
            return _this.previous();
          case 39:
            return _this.next();
        }
      });
      this.el.find(".previous").click(function() {
        return _this.previous();
      });
      this.el.find(".next").click(function() {
        return _this.next();
      });
      return this.el.find("select").change(function() {
        _this.category = _this.el.find("select").val();
        _this.curr = 0;
        return _this.update();
      });
    };

    SubtlePatternsOverlay.prototype.next = function() {
      if (this.curr < this.category_patterns().length - 1) {
        this.curr += 1;
      } else {
        this.curr = 0;
      }
      return this.update();
    };

    SubtlePatternsOverlay.prototype.previous = function() {
      if (this.curr > 0) {
        this.curr -= 1;
      } else {
        this.curr = this.category_patterns().length - 1;
      }
      return this.update();
    };

    return SubtlePatternsOverlay;

  })();

  load_script("https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js", function() {
    load_css("http://bradjasper.com/subtle-patterns-bookmarklet/bookmarklet.css?cb=" + (Math.random()));
    return load_subtle_patterns(function(patterns) {
      var overlay;
      overlay = new SubtlePatternsOverlay(patterns);
      return overlay.setup();
    });
  });

}).call(this);
